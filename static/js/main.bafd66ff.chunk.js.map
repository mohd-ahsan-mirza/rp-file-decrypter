{"version":3,"sources":["components/Manipulator.js","App.js","serviceWorker.js","index.js"],"names":["Manipulator","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","originalList","manipulatedList","originalListArray","manipulatedlistArray","notSelected","isSelected","options","push","id","selected","button","react_default","a","createElement","key","type","className","onClick","updateButtonProperties","newListString","newList","filter","selectedOption","length","run","value","transaction_type","substring","program_source","sequence_number","invoice_number","date","start_date","end_date","invoice_description_headers","total","fed_tax","prov_tax","total_pages","order_number","province","program_var","member_id","rbc_id","current_price","federal_tax","provincial_tax","setState","replace","convertCSVToDat","convertDatToCSV","resetManipulatedList","number","Math","floor","random","newString","manipulateList","thisOption","option","find","optionIndex","findIndex","$","attr","_this2","map","renderOption","event","preventDefault","target","newArray","split","el","_this3","onChange","updateOriginalList","rows","renderOptions","reset","readOnly","Component","App","manipulator","components_Manipulator","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bafd66ff.chunk.js","sourcesContent":["import React,{Component} from 'react';\nimport $ from 'jquery';\n\nclass Manipulator extends Component{\n    constructor(props){\n        super(props); \n\n        this.state = {\n            originalList : \"\",\n            manipulatedList : \"\",\n        };\n\n        this.originalListArray = [];\n        this.manipulatedlistArray = [];\n\n        this.notSelected = 'btn btn-info';\n        this.isSelected = 'btn btn-danger';\n\n\n        this.options = [];\n        this.options.push({id:\"1\",selected:false,button:<button id='button1' key=\"1\" type='button' className={this.notSelected} onClick={() => this.updateButtonProperties(\"1\")}>DAT TO CSV</button>});\n        this.options.push({id:\"2\",selected:false,button:<button id='button2' key=\"2\" type='button' className={this.notSelected} onClick={() => this.updateButtonProperties(\"2\")}>CSV TO DAT</button>});\n        //Add option here\n    }\n\n    convertDatToCSV(){\n        var newListString = \"\";\n\n        var invoice_description_headers = \"Trans,Program,Seq,Inv,Date,Start_date,End_Date\";\n        var orders_headers = \"Trans,Program,Seq,Inv,Order,Date,Prov,Prog_var,Member,Rbc_id,Price,Fed_tax,Prov_tax\";\n        var total_headers = \"Trans,Program,Seq,Inv Total,Federal Tax, Provincial Tax,Total\";\n\n        var selectedOption = this.options.filter(selectedOption => selectedOption.id === \"1\" && selectedOption.selected === true);\n        var newList = [];\n        if(selectedOption.length!==0){\n            for(var run=0;run<this.manipulatedlistArray.length;run++){\n                var value = this.manipulatedlistArray[run];\n                //var length = value.length;\n                \n                switch(run){\n                case 0:\n                    var transaction_type = value.substring(0,1);\n                    var program_source = value.substring(1,3);\n                    var sequence_number = value.substring(3,9);\n                    var invoice_number = value.substring(9,24);\n                    var date = value.substring(24,32);\n                    var start_date = value.substring(32,40);\n                    var end_date = value.substring(40,48);\n                    value = transaction_type + \",\" + program_source + \",\" + sequence_number + \",\" + invoice_number + \",\" + date + \",\" + \",\" + start_date + \",\" + end_date;\n                    value = invoice_description_headers + \"\\r\\n\" + value + \"\\r\\n\\r\\n\" + orders_headers;\n                    break;\n                case (this.manipulatedlistArray.length-1):\n                    var transaction_type = value.substring(0,1);\n                    var program_source = value.substring(1,3);\n                    var sequence_number = value.substring(3,9);\n                    var total = value.substring(9,20);\n                    var fed_tax = value.substring(20,31);\n                    var prov_tax = value.substring(31,42);\n                    var total_pages = value.substring(42,46);\n                    value = transaction_type + \",\" + program_source + \",\" + sequence_number + \",\" + total + \",\" + fed_tax + \",\" + prov_tax + \",\" + total_pages;\n                    value = \"\\r\\n\" + total_headers + \"\\r\\n\" + value;\n                    break;\n                default:\n                    var transaction_type = value.substring(0,1);\n                    var program_source = value.substring(1,3);\n                    var sequence_number = value.substring(3,9);\n                    var invoice_number = value.substring(9,24);\n                    var order_number = value.substring(24,36);\n                    var date = value.substring(36,44);\n                    var province = value.substring(44,46);\n                    var program_var = value.substring(46,58);\n                    var member_id = value.substring(58,67);\n                    var rbc_id = value.substring(67,73);\n                    var current_price = value.substring(73,81);\n                    var federal_tax = value.substring(81,89);\n                    var provincial_tax = value.substring(89,97);\n                    value = transaction_type + \",\" + program_source + \",\" + sequence_number + \",\" + invoice_number + \",\" + order_number + \",\" + date + \",\" + province;\n                    value = value + \",\" + program_var + \",\" + member_id + \",\" + rbc_id + \",\" + current_price + \",\" + federal_tax + \",\" + provincial_tax;\n                    break;\n                }\n\n                newList.push(value);\n                //newListString = newListString+length+\"\\r\\n\"+value+\"\\r\\n\";\n                newListString = newListString+value+\"\\r\\n\";\n            }\n            this.manipulatedlistArray = newList;\n            this.setState({\n                manipulatedList : newListString,\n            });\n        }\n    }\n\n    convertCSVToDat(){\n        var newListString = \"\";\n        var selectedOption = this.options.filter(selectedOption => selectedOption.id === \"2\" && selectedOption.selected === true);\n        var newList = [];\n        if(selectedOption.length!==0){\n            for(var run=0;run<this.manipulatedlistArray.length;run++){\n                var value = this.manipulatedlistArray[run].replace(/,/g, '');\n                //var length = value.length;\n                newList.push(value);\n                //newListString = newListString+length+\"\\r\\n\"+value+\"\\r\\n\";\n                newListString = newListString+value+\"\\r\\n\";\n            }\n            this.manipulatedlistArray = newList;\n            this.setState({\n                manipulatedList : newListString,\n            });\n        }\n    }\n\n    //Add option function\n\n    manipulateList(){\n        this.manipulatedlistArray = this.originalListArray;\n        this.convertCSVToDat();\n        this.convertDatToCSV();\n        //Call option function\n    }\n\n    resetManipulatedList(){\n        this.manipulatedlistArray = [];\n        this.setState({\n            manipulatedList : \"\",\n        });\n    }\n\n    reset(){\n        this.originalListArray = [];\n        this.setState({\n            originalList : \"\",\n        });\n        this.resetManipulatedList();\n    }\n\n    demo(){\n        var number = Math.floor((Math.random() * 100) + 1);\n        this.originalListArray.push(number);\n        var newString = \"\";\n        if(this.state.originalList.length!==0)\n            newString = this.state.originalList+\"\\n\";\n        this.setState({\n            originalList : newString+number\n        });\n        if(this.options.filter(selectedOption => selectedOption.selected === true).length !== 0)\n            this.manipulateList();\n    }\n\n    updateButtonProperties(thisOption){\n        var option = this.options.find(option => option.id === thisOption);\n        var optionIndex = this.options.findIndex(option => option.id === thisOption);\n        if(option.selected){\n            option.selected = false;\n            $(\"#\"+option.button.props.id).attr(\"class\",this.notSelected);\n        }else{\n            option.selected = true;\n            $(\"#\"+option.button.props.id).attr(\"class\",this.isSelected);\n        }\n        this.options[optionIndex] = option;\n        this.setState(this.options);\n        if(this.options.filter(selectedOption => selectedOption.selected === true).length !== 0)\n            this.manipulateList();\n        else\n            this.resetManipulatedList();\n    }\n\n    renderOption(option){\n        return <div className=\"row mb-4\">\n                    <div className=\"col text-center\">\n                        {option.button}\n                    </div>\n                </div>\n    }\n\n    renderOptions(){\n        return (\n            this.options.map(option => {return this.renderOption(option);\n        }));\n    }\n\n    updateOriginalList(event) {\n        event.preventDefault();\n        this.setState({\n            originalList : event.target.value,\n        });\n        if(this.state.originalList.length==0){\n            var newArray = event.target.value.split(\"\\n\");\n            this.originalListArray = newArray;\n        }else{\n            this.originalListArray = this.state.originalList.split(\"\\n\");\n        }\n        this.originalListArray = this.originalListArray.filter(function (el) {\n            return el != \"\";\n        });\n        this.manipulateList();\n    }\n\n    render(){\n        return <form className=\"row\">\n                    <div className=\"form-group col-lg-12 col-md-12 col-sm-12\">\n                        <h4 className=\"text-center col-lg-12 col-md-12 col-sm-12\">Original List</h4>\n                        <textarea value={this.state.originalList} onChange={(event) => this.updateOriginalList(event)} className=\"form-control col-lg-12 col-md-12 col-sm-12\" rows=\"20\"></textarea>\n                    </div>\n                    <div className=\"form-group col-lg-12 col-md-12 col-sm-12\">\n                        <h4 className=\"text-center col-lg-12 col-md-12 col-sm-12 mb-4\">Options</h4>\n                        {this.renderOptions()}\n                        <div className=\"row mb-4\"><div className=\"col text-center\"><button type='button' className='btn btn-success' onClick={() => this.reset()}>RESET</button></div></div>\n                    </div>\n                    <div className=\"form-group col-lg-12 col-md-12 col-sm-12\">\n                        <h4 className=\"text-center col-lg-12 col-md-12 col-sm-12\">Result</h4>\n                        <textarea value={this.state.manipulatedList} className=\"form-control col-lg-12 col-md-12 col-sm-12\" rows=\"20\" readOnly></textarea>\n                    </div>\n                </form>\n    }\n}\n\nexport default Manipulator;","import React, { Component } from 'react';\nimport './App.css';\nimport Manipulator from './components/Manipulator'\n\nclass App extends Component {\n\n  constructor(props){\n    super(props);\n    this.manipulator = new Manipulator(); \n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <h2 className=\"text-center\">RP File Decrypter</h2>\n          <Manipulator />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}